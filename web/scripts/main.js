// Generated by CoffeeScript 1.3.3
/*
@author Tantaman
*/

var continuation;

requirejs.config({
  paths: {
    "css": "vendor/amd_plugins/css",
    "text": "vendor/amd_plugins/text"
  }
});

window.browserPrefix = "";

if ($.browser.mozilla) {
  window.browserPrefix = "-moz-";
} else if ($.browser.msie) {
  window.browserPrefix = "-ms-";
} else if ($.browser.opera) {
  window.browserPrefix = "-o-";
} else if ($.browser.webkit) {
  window.browserPrefix = "-webkit-";
}

if (!(window.localStorage != null)) {
  window.localStorage = {
    setItem: function() {},
    getItem: function() {},
    length: 0
  };
}

if (!(Function.bind != null) || (Function.prototype.bind != null)) {
  Function.prototype.bind = function(ctx) {
    var fn;
    fn = this;
    return function() {
      return fn.apply(ctx, arguments);
    };
  };
}

if (window.location.href.indexOf("preview=true") !== -1) {

} else {
  continuation = function() {
    return requirejs(["ui/editor/Editor", "model/presentation/Deck", "storage/FileStorage", "model/common_application/UndoHistory"], function(Editor, Deck, FileStorage, UndoHistory) {
      var deck, editor, lastPres, pres;
      window.undoHistory = new UndoHistory(20);
      deck = new Deck();
      editor = new Editor({
        model: deck
      });
      window.zTracker = {
        z: 0,
        next: function() {
          return ++this.z;
        }
      };
      $("body").append(editor.render());
      lastPres = localStorage.getItem("StrutLastPres");
      if (lastPres != null) {
        pres = FileStorage.open(lastPres);
        if (pres != null) {
          deck["import"](pres);
        }
      }
      if (!(lastPres != null)) {
        return deck.newSlide();
      }
    });
  };
  requirejs(["vendor/amd/backbone", "state/DefaultState", "vendor/amd/etch", "ui/etch/Templates", "css!ui/etch/res/css/etchOverrides.css"], function(Backbone, DefaultState, etch, EtchTemplates) {
    Backbone.sync = function(method, model, options) {
      if (options.keyTrail != null) {
        return options.success(DefaultState.get(options.keyTrail));
      }
    };
    window.slideConfig = {
      size: {
        width: 1024,
        height: 768
      }
    };
    _.extend(etch.config.buttonClasses, {
      "default": ['<group>', 'clear-formatting', '</group>', '<group>', 'bold', 'italic', '</group>', '<group>', 'unordered-list', 'ordered-list', '</group>', '<group>', 'justify-left', 'justify-center', 'justify-right', '</group>', '<group>', 'link', '</group>', 'font-family', 'font-size', '<group>', 'color', '</group>']
    });
    etch.buttonElFactory = function(button) {
      var viewData;
      viewData = {
        button: button,
        title: button.replace('-', ' '),
        display: button.substring(0, 1).toUpperCase()
      };
      if (button === 'link' || button === 'clear-formatting' || button === 'ordered-list' || button === 'unordered-list') {
        viewData.display = '';
      }
      switch (button) {
        case "font-size":
          return EtchTemplates.fontSizeSelection(viewData);
        case "font-family":
          return EtchTemplates.fontFamilySelection(viewData);
        case "color":
          return EtchTemplates.colorChooser(viewData);
        default:
          if (button.indexOf("justify") !== -1) {
            viewData.icon = button.substring(button.indexOf('-') + 1, button.length);
            return EtchTemplates.align(viewData);
          } else {
            return EtchTemplates.defaultButton(viewData);
          }
      }
    };
    etch.groupElFactory = function() {
      return $('<div class="btn-group">');
    };
    return continuation();
  });
  /*
  	switch (button) {
        case 'font-size':
          return $('<a class="etch-editor-button dropdown-toggle disabled" data-toggle="dropdown" title="'
             + button.replace('-', ' ') + 
             '"><span class="text">Lato</span></a><ul class="dropdown-menu etch-'
              + button + '"><li><a href="#">Wee2</a></li></ul>');
        case 'font-family':
         return $('<a class="etch-editor-button dropdown-toggle disabled" data-toggle="dropdown" title="'
             + button.replace('-', ' ') + 
             '"><span class="text">Lato</span></a><ul class="dropdown-menu etch-'
              + button + '"><li><a href="#">Wee</a></li></ul>');
        break;
        default:
  */

}
