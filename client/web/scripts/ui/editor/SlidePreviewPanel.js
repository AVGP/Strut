// Generated by CoffeeScript 1.2.1-pre
/*
@author Matt Crinklaw-Vogt
*/

define(["vendor/backbone", "./SlideSnapshot", "vendor/keymaster", "ui/interactions/CutCopyPasteTrait", "model/system/Clipboard", "css!./res/css/SlidePreviewPanel.css"], function(Backbone, SlideSnapshot, Keymaster, CutCopyPasteTrait, Clipboard, empty) {
  return Backbone.View.extend({
    className: "slidePreviewPanel",
    events: {
      "sortstop": "sortstop",
      "click": "clicked"
    },
    initialize: function() {
      var slideCollection;
      slideCollection = this.model.get("slides");
      slideCollection.on("add", this._slideCreated, this);
      slideCollection.on("reset", this._slidesReset, this);
      CutCopyPasteTrait.applyTo(this, "slidePreviewPanel");
      return this._clipboard = new Clipboard();
    },
    _slideCreated: function(slide) {
      var snapshot;
      snapshot = new SlideSnapshot({
        model: slide
      });
      snapshot.on("removeClicked", this.slideRemoveClicked, this);
      return this.$el.append(snapshot.render());
    },
    _slidesReset: function(newSlides) {
      var _this = this;
      return newSlides.each(function(slide) {
        return _this._slideCreated(slide);
      });
    },
    _slideRemoved: function(slide, collection, options) {
      this.snapshots[options.index].remove();
      return this.snapshots.splice(options.index, 1);
    },
    slideRemoveClicked: function(snapshot) {
      return this.model.removeSlide(snapshot.model);
    },
    cut: function() {
      var slide;
      slide = this.model.get("activeSlide");
      if (slide != null) {
        this._clipboard.set("item", slide);
        this.model.removeSlide(slide);
        slide.set("selected", false);
        return false;
      }
    },
    copy: function() {
      var slide;
      slide = this.model.get("activeSlide");
      if (slide != null) {
        console.log(slide);
        this._clipboard.set("item", slide.clone());
        return false;
      }
    },
    paste: function() {
      var item, newItem;
      item = this._clipboard.get("item");
      if (item != null) {
        newItem = item.clone();
        newItem.set("x", null);
        newItem.set("y", null);
        return this.model.addSlide(newItem);
      }
    },
    render: function() {
      var slides,
        _this = this;
      slides = this.model.get("slides");
      if (slides != null) {
        slides.each(function(slide) {
          return _this._slideCreated(slide);
        });
      }
      this.$el.sortable();
      return this.$el;
    },
    sortstop: function(e, ui) {
      var _this = this;
      this.$el.children().each(function(idx, elem) {
        return $(elem).data("jsView").model.set("num", idx);
      });
      return this.model.get("slides").sort({
        silent: true
      });
    },
    clicked: function() {
      if (Keymaster.getScope() !== "slidePreviewPanel") {
        return Keymaster.setScope("slidePreviewPanel");
      }
    },
    remove: function() {
      Backbone.View.prototype.remove.apply(this, arguments);
      return this.dispose();
    },
    dispose: function() {
      return this.snapshots.forEach(function(snapshot) {
        return snapshot.dispose();
      });
    }
  });
});
